{
  "name": "mongoose-list",
  "version": "0.2.1",
  "description": "List plugin for mongoose that allows pagination, filtering, and sorting.",
  "homepage": "https://github.com/snailjs/mongoose-list",
  "bugs": {
    "url": "https://github.com/snailjs/mongoose-list/issues"
  },
  "authors": [
    {
      "name": "Bryan Tong",
      "email": "contact@nullivex.com",
      "homepage": "https://github.com/nullivex"
    },
    {
      "name": "Tony Butler",
      "email": "spudz76@gmail.com",
      "homepage": "https://github.com/spudz76"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/snailjs/mongoose-list.git"
  },
  "keywords": [
    "mongoose",
    "plugin",
    "list",
    "paging",
    "pagination",
    "sort",
    "search"
  ],
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {},
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-contrib-jshint": "~0.7.1",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-mocha-test": "~0.8.1",
    "grunt-project-update": "~0.2.2",
    "mocha": "~1.15.1",
    "chai": "~1.8.1",
    "jshint-stylish": "~0.1.3",
    "mongoose": "~3.8.2",
    "async": "~0.2.9"
  },
  "scripts": {
    "test": "grunt test"
  },
  "readme": "mongoose-list [![Build Status](https://travis-ci.org/snailjs/mongoose-list.png?branch=master)](https://travis-ci.org/snailjs/mongoose-list)\r\n=============\r\n\r\nList plugin for mongoose that allows pagination, filtering, sorting.\r\n\r\n## Installation\r\n\r\n```\r\n$ npm install mongoose-list\r\n```\r\n\r\n## Usage\r\n\r\n**model.js**\r\n```js\r\nvar mongoose = require('mongoose')\r\n  , schema\r\n\r\nmongoose.plugin(require('../lib/mongoose-list'),{searchFields: ['name']})\r\n\r\nschema = new mongoose.Schema({\r\n  name: {\r\n    type: String,\r\n    require: true\r\n  }\r\n})\r\n\r\nmodule.exports = mongoose.model('Test',schema)\r\n```\r\n\r\n**app.js**\r\n```js\r\nvar Model = require('./model')\r\n\r\n//with sorting\r\nModel.list({start: 0, limit: 10, sort: 'name'},function(err,count,results){\r\n  if(err) throw err\r\n  console.log('found ' + count + 'records')\r\n  results.forEach(function(row){\r\n    console.log('name: ' + row.name)\r\n  })\r\n})\r\n\r\n//with searching\r\nModel.list({start: 0, limit: 10, sort: 'name', find: 'foo'},function(err,count,results){\r\n  if(err) throw err\r\n  console.log('found ' + count + 'records')\r\n  results.forEach(function(row){\r\n    console.log('name: ' + row.name)\r\n  })\r\n})\r\n```\r\n\r\n## Instantiation Options\r\n\r\n### Search Fields\r\n* Variable `searchFields`\r\n* Default all non hidden schema paths\r\n\r\nThis option will limit what fields are considered searchable.\r\nBy default it will search any field that does not start with `_`\r\n\r\n## Call Time Options\r\n\r\n### Start\r\n* Variable `start`\r\n* Default `0`\r\n\r\nWhere to start showing records from. Also known as offset.\r\n\r\n### Limit\r\n* Variable `limit`\r\n* Default `10`\r\n\r\nLimit of records to return in result set.\r\n\r\n### Sort\r\n* Variable `sort`\r\n* Default `''`\r\n\r\nUses a Mongoose style sort string eg: `+name -author'\r\n\r\n### Find\r\n* Variable `find`\r\n* Default `''`\r\n\r\nFilter results by value applying to the `searchFields`\r\n\r\nAlternatively, the `find` variable can also be a custom mongoose query object like the following example:\r\n\r\n```js\r\nvar query = {\r\n  find: {\r\n    $or: [\r\n      { field1: /something/ },\r\n      { field2: new RegExp('else', 'i') }\r\n    ]\r\n  }\r\n}\r\nModel.list({start: 0, limit: 10, sort: 'name', find: query},function(err,count,results){\r\n  if(err) throw err\r\n  console.log('found ' + count + 'records')\r\n  results.forEach(function(row){\r\n    console.log('name: ' + row.name)\r\n  })\r\n})\r\n```\r\n\r\nThis allows you to perform custom and complex queries and still make use of the remaining features of this module such as pagination.\r\n\r\n## Changelog\r\n\r\n### 0.2.1\r\n* Fixed issue with plugin crashing with out of range start and limit values.\r\n\r\n### 0.2.0\r\n* Added custom `find` object support that can be a direct mongoose query object rather than having\r\none built automatically.\r\n\r\n### 0.1.1\r\n* Fixed bug with searching on non string fields\r\n\r\n### 0.1.0\r\n* Initial Release",
  "readmeFilename": "README.md",
  "_id": "mongoose-list@0.2.1",
  "dist": {
    "shasum": "4caba6b4d25863957158a5bf5e96b3454ca3a3fa"
  },
  "_from": "mongoose-list@~0.2.1",
  "_resolved": "https://registry.npmjs.org/mongoose-list/-/mongoose-list-0.2.1.tgz"
}
